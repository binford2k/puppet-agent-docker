#!/usr/bin/env bash

set -eux

PATH="$PATH":/usr/local/bin
BUNDLER_PATH=.bundle/gems
IS_NIGHTLY="${IS_NIGHTLY:-false}"
IS_LATEST="${IS_LATEST:-false}"

function build_and_test_image() {
  local container_name="$1"
  local container_version="$2"
  local latest=''
  if [[ "$IS_LATEST" == 'false' ]]; then
    local latest='--no-latest'
  fi

  : ===
  : === run linter on the docker files
  : ===
   bundle exec puppet-docker local-lint "$container_name" --dockerfile "$dockerfile"

  : ===
  : === build and test $container_name
  : ===
  bundle exec puppet-docker build "$container_name" --repository puppet --version "$container_version" --dockerfile "$dockerfile" $latest
  bundle exec puppet-docker spec "$container_name" --image "puppet/$container_name:$container_version"
}

function push_image() {
  local container_name="$1"
  local container_version="$2"
  local latest=''
  if [[ "$IS_LATEST" == 'false' ]]; then
    local latest='--no-latest'
  fi

  : ===
  : === push $container_name
  : ===
  bundle exec puppet-docker push "$container_name" --repository puppet --version "$container_version" --dockerfile "$dockerfile" $latest
}

function get_version() {
  local version='puppet6-nightly'
  if [[ "$IS_NIGHTLY" == 'false' ]]; then
    : ===
    : === If we do not git pull --unshallow we get really weird results with git describe
    : ===
    git pull --unshallow > /dev/null 2>&1

    : ===
    : === make sure we fetch tags for versioning
    : ===
    git fetch origin 'refs/tags/*:refs/tags/*'
    local git_describe=`git describe`
    local version="${git_describe%%-*}"
  fi
  echo "$version"
}

function get_dockerfile() {
  local dockerfile='Dockerfile.nightly'
  if [[ "$IS_NIGHTLY" == 'false' ]]; then
    local dockerfile='Dockerfile'
  fi
  echo "$dockerfile"
}

: ===
: === bundle install to get ready
: ===
bundle install --path "$BUNDLER_PATH"

version="$(get_version)"
dockerfile="$(get_dockerfile)"

: ===
: === pull updated base images
: ===
bundle exec puppet-docker update-base-images alpine:3.8 ubuntu:16.04

if [[ "$IS_NIGHTLY" == 'false' ]]; then
  container_list=(puppet-agent-alpine puppet-agent-ubuntu)
else
  container_list=(puppet-agent-ubuntu)
fi

: ===
: === build and test all the images before we push anything
: ===
for container in "${container_list[@]}"; do
  build_and_test_image "$container" "$version"
done

: ===
: === push all the images
: ===
for container in "${container_list[@]}"; do
  push_image "$container" "$version"
done

: ===
: === SUCCESS
: ===
